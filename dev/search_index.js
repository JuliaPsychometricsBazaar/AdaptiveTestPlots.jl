var documenterSearchIndex = {"docs":
[{"location":"#AdaptiveTestPlots.jl","page":"Home","title":"AdaptiveTestPlots.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a package for plotting recordings of CATs (Computerised Adaptive Tests).","category":"page"},{"location":"#Index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#API","page":"Home","title":"API","text":"","category":"section"},{"location":"#AdaptiveTestPlots.AdaptiveTestPlots","page":"Home","title":"AdaptiveTestPlots.AdaptiveTestPlots","text":"This module contains helpers for creating CAT/IRT related plots. This module requires the optional depedencies AlgebraOfGraphics, DataFrames and Makie to be installed.\n\n\n\n\n\n","category":"module"},{"location":"#AdaptiveTestPlots.LabelledToggleGrid","page":"Home","title":"AdaptiveTestPlots.LabelledToggleGrid","text":"AdaptiveTestPlots.LabelledToggleGrid <: Block\n\nNo docstring defined.\n\nAttributes\n\n(type ?AdaptiveTestPlots.LabelledToggleGrid.x in the REPL for more information about attribute x)\n\nalignmode, halign, height, tellheight, tellwidth, valign, width\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveTestPlots.MenuGrid","page":"Home","title":"AdaptiveTestPlots.MenuGrid","text":"AdaptiveTestPlots.MenuGrid <: Block\n\nNo docstring defined.\n\nAttributes\n\n(type ?AdaptiveTestPlots.MenuGrid.x in the REPL for more information about attribute x)\n\nalignmode, halign, height, tellheight, tellwidth, valign, width\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveTestPlots.ViolinSeq","page":"Home","title":"AdaptiveTestPlots.ViolinSeq","text":"ViolinSeq is the plot type associated with plotting function violinseq. Check the docstring for violinseq for further information.\n\n\n\n\n\n","category":"type"},{"location":"#AdaptiveTestPlots.ability_evolution-Tuple{ComputerAdaptiveTesting.Sim.CatRecording}","page":"Home","title":"AdaptiveTestPlots.ability_evolution","text":"ability_evolution(\n    recording::ComputerAdaptiveTesting.Sim.CatRecording\n) -> AlgebraOfGraphics.FigureGrid\n\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveTestPlots.lh_evolution_interactive-Tuple{Any}","page":"Home","title":"AdaptiveTestPlots.lh_evolution_interactive","text":"lh_evolution_interactive(\n    recording;\n    abilities\n) -> Makie.Figure\n\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveTestPlots.plot_item_bank-Tuple{FittedItemBanks.AbstractItemBank}","page":"Home","title":"AdaptiveTestPlots.plot_item_bank","text":"plot_item_bank(\n    item_bank::FittedItemBanks.AbstractItemBank;\n    fig,\n    items,\n    labeller,\n    zero_symmetric,\n    include_outcome_toggles,\n    item_selection,\n    include_legend\n) -> Makie.Figure\n\n\nPlot an item bank item_bank with items items using the labeller labeller to label the items.\n\nLines are drawn for each item and each outcome. The domain of the item bank is used to determine the x-axis limits. You can use zero_symmetric to force the domain to be symmetric about zero.\n\nIf include_outcome_toggles is true, then a toggle grid is drawn to show/hide the outcomes. If item_selection is :toggles, then a toggle grid is drawn to show/hide the items, for :menu a menu is used allowing a single item to be choseshowenn.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveTestPlots.plot_item_bank_comparison-Tuple{AbstractVector}","page":"Home","title":"AdaptiveTestPlots.plot_item_bank_comparison","text":"plot_item_bank_comparison(\n    item_banks::AbstractVector;\n    items,\n    labeller,\n    include_outcome_toggles,\n    include_item_toggles,\n    ignore_domain_indices,\n    lims,\n    grid_points,\n    plot_item_response_cb,\n    size\n) -> Makie.Figure\n\n\nPlot a comparison of multiple item banks item_banks. For an explanation of the options, see: plot_item_bank.\n\n\n\n\n\n","category":"method"},{"location":"#AdaptiveTestPlots.plot_likelihoods","page":"Home","title":"AdaptiveTestPlots.plot_likelihoods","text":"plot_likelihoods(\n    estimators,\n    tracked_responses,\n    integrator,\n    xs;\n    ...\n) -> Makie.Figure\nplot_likelihoods(\n    estimators,\n    tracked_responses,\n    integrator,\n    xs,\n    lim_lo;\n    ...\n) -> Makie.Figure\nplot_likelihoods(\n    estimators,\n    tracked_responses,\n    integrator,\n    xs,\n    lim_lo,\n    lim_hi;\n    fig\n) -> Makie.Figure\n\n\n\n\n\n\n","category":"function"},{"location":"#AdaptiveTestPlots.violinseq","page":"Home","title":"AdaptiveTestPlots.violinseq","text":"violin_seq(steps, xs, all_ys)\n\nDraw a violin plot from precomputed likelihoods at different steps.\n\nArguments\n\nsteps: positions of the step at which the likelihood applies (categories)\nxs: points at which the likelihood was evaluated\nall_ys: precomputed likelihoods at different steps\n\nPlot type\n\nThe plot type alias for the violinseq function is ViolinSeq.\n\nAttributes\n\nclip_planes =  automatic  — Clip planes offer a way to do clipping in 3D space. You can set a Vector of up to 8 Plane3f planes here, behind which plots will be clipped (i.e. become invisible). By default clip planes are inherited from the parent plot or scene. You can remove parent clip_planes by passing Plane3f[].\n\ncolor =  @inherit patchcolor  — No docs available.\n\ndatalimits =  (-Inf, Inf)  — Specify values to trim the violin. Can be a Tuple or a Function (e.g. datalimits=extrema).\n\ndepth_shift =  0.0  — Adjusts the depth value of a plot after all other transformations, i.e. in clip space, where -1 <= depth <= 1. This only applies to GLMakie and WGLMakie and can be used to adjust render order (like a tunable overdraw).\n\ndodge =  automatic  — No docs available.\n\ndodge_gap =  0.03  — No docs available.\n\nfxaa =  true  — Adjusts whether the plot is rendered with fxaa (anti-aliasing, GLMakie only).\n\ngap =  0.2  — Shrinking factor, width -> width * (1 - gap).\n\ninspectable =  @inherit inspectable  — Sets whether this plot should be seen by DataInspector. The default depends on the theme of the parent scene.\n\ninspector_clear =  automatic  — Sets a callback function (inspector, plot) -> ... for cleaning up custom indicators in DataInspector.\n\ninspector_hover =  automatic  — Sets a callback function (inspector, plot, index) -> ... which replaces the default show_data methods.\n\ninspector_label =  automatic  — Sets a callback function (plot, index, position) -> string which replaces the default label generated by DataInspector.\n\nmax_density =  automatic  — No docs available.\n\nmodel =  automatic  — Sets a model matrix for the plot. This overrides adjustments made with translate!, rotate! and scale!.\n\nn_dodge =  automatic  — No docs available.\n\norientation =  :vertical  — Orientation of the violins (:vertical or :horizontal)\n\noverdraw =  false  — Controls if the plot will draw over other plots. This specifically means ignoring depth checks in GL backends\n\nscale =  :area  — Scale density by area (:area) or width (:width).\n\nspace =  :data  — Sets the transformation space for box encompassing the plot. See Makie.spaces() for possible inputs.\n\nssao =  false  — Adjusts whether the plot is rendered with ssao (screen space ambient occlusion). Note that this only makes sense in 3D plots and is only applicable with fxaa = true.\n\nstrokecolor =  @inherit patchstrokecolor  — No docs available.\n\nstrokewidth =  @inherit patchstrokewidth  — No docs available.\n\ntransformation =  :automatic  — No docs available.\n\ntransparency =  false  — Adjusts how the plot deals with transparency. In GLMakie transparency = true results in using Order Independent Transparency.\n\nvisible =  true  — Controls whether the plot will be rendered or not.\n\nwidth =  automatic  — Width of the box before shrinking.\n\n\n\n\n\n","category":"function"},{"location":"#AdaptiveTestPlots.violinseq!","page":"Home","title":"AdaptiveTestPlots.violinseq!","text":"violinseq! is the mutating variant of plotting function violinseq. Check the docstring for violinseq for further information.\n\n\n\n\n\n","category":"function"}]
}
